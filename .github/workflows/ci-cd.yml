name: CI/CD

# on:
#   push:
#     branches:
#       - staging
#   pull_request:
#     branches:
#       - staging

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  buildAndTest:
    name: CI Pipeline
    # runs-on: linux / ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.x']
        mongodb-version: [4.4]

    steps:
      - uses: actions/checkout@v2

      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}

      # Install project dependencies, test and build
      - name: Install dependencies
        run: npm install
      # - name: Start test server
      #   run: pwd
      #   run: ls
      #   run: npm run start:test
      - name: Run Linting and Unit Tests
        run: npm run test
        env:
          CI: true
      - name: Run Integration Tests
        uses: cypress-io/github-action@v1
        with:
          # build: npm run build
          start: npm run start:test
          wait-on: http://localhost:3030
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

  deploy:
    name: CD Pipeline
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # python-version: [3.8]
        # node-version: ['12.x']
        appname: ['acebook-node']
        # deploy-group: ['AcebookNodeGroup']
        s3-bucket: ['acebook-node-deployments']
        s3-filename: ['master-acebook-node-${{ github.sha }}']

    needs: buildAndTest
    steps:
      - uses: actions/checkout@v2

      # Initialize Node.js
      # - name: Install Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: ${{ matrix.node-version }}

      # Install project dependencies and build
      # - name: Install dependencies
      #   run: npm install
      # - name: Run build
      #   run: npm run build

      # Login to Docker Hub, build and push image
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/acebook-node:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      # Install AWS CLI 2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      # Old: docker save ${{ secrets.DOCKERHUB_USERNAME }}/acebook-node | gzip -c > acebook-node-docker.tar.gz
      # Serialize Docker Image
      - name: Docker Image to .tar archive
        run: |
          docker save ${{ secrets.DOCKERHUB_USERNAME }}/acebook-node > acebook-node-docker.tar
          

      # Deploy push to AWS S3
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ matrix.appname }} \
          --description "This is a revision for the ${{ matrix.appname }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
          --source .

      # Create deployment to CodeDeploy
      - name: AWS Create Deployment
        run: |
          aws deploy create-deployment \
           --application-name acebook-node \
           --deployment-config-name CodeDeployDefault.AllAtOnce \
           --deployment-group-name AcebookNodeGroup \
           --file-exists-behavior OVERWRITE \
           --s3-location bucket=${{ matrix.s3-bucket }},key=${{ matrix.s3-filename }}.zip,bundleType=zip \
